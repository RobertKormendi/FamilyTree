Using hard-coded family members in an array in the format (name, name of parent)

First, assign each parent's object as the parent of each person as opposed to just their name, so person.parent returns a person object



Assign each person their generation number by iterating over the person's lineage:
For each person, start with the generation number at 1, assign the person's parent as the person, 
and increment the generation number. loop until parent is none (The common ancestor). Then assign the generation number to the person being checked.

Input is 1 string, 2 names that are comma separated, then separate by commas and delete spaces. If the input contains more or less than 2 separable names, 
it does not pass and prompts again for a valid input. 
If either of the 2 names do not exist in the family tree, prompt for a new input
Assign the names as person 1 and person 2.
iterate over family array looking for the object with the name that was input, and assign the Person object as opposed to just using the name.
(this gives access to Person.parent as well without having to check over the entire list)


Find the common ancestor:
First, determine which person has the lower generation number and which has the higher generation number, assign them as such.
Check if the 2 people are the same person.
Iterate over the parents of the person with the higher generation number, and check if the person with the lower generation number is an ancestor of the former.
Either way, now the person in higher gen's lineage who is the same generation as lower gen is found, so iterate over both of their parents until they are the same
person, in which case the common ancestor is found. 
It is assumed that there is a common ancestor.


Checking Relationship:
The first part of the relationship, "xth cousin", is the generation difference between the first person, and the common ancestor.
The second part, "y times removed", is the generation difference between the second person, and the common ancestor.
Then, using a library, determine what suffix is needed for each number.
Since numbers 10-20 noninclusive are special cases, if n modulo 100 is greater than 10 but less than 20. (if the last 2 digits are between 10 and 20).
Otherwise, check n modulo 10, and get the required value from the library.

For the second part, for once. twice, thrice removed, assign them in a library, and get using a default value of "n times"

If they are of the same lineage, I used a list of elifs to determine the printed message based on the difference in their generations. 
If the difference is positive, then person1 is a descendant of person2, and vice versa.

If the difference in generation is more than 2, then tack on the difference in generation minus 2 "great"s before "grandchild"/"grandparent"

